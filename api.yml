version: "3.7"

services:
  api-gateway:
    image: ghcr.io/bo2kshelf/api-gateway:develop
    ports:
      - target: 4000
        published: 4000
        mode: ingress
    networks:
      - api
    environment:
      PORT: 4000
      BOOKS_API_URL: http://neo4j-api:4000/graphql
      BOOKCOVER_API_URL: http://bookcover-api:4000/graphql
      SEARCH_API_URL: http://search-api:4000/graphql
      USERS_API_URL: http://users-api:4000/graphql
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  imageproxy:
    image: willnorris/imageproxy
    networks:
      - imageproxy
    environment:
      IMAGEPROXY_CACHE: redis://imageproxy-redis:6379
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  imageproxy-redis:
    image: redis:6
    networks:
      - imageproxy
    volumes:
      - imageproxy-redis-data:/data
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  bookcover-api:
    image: ghcr.io/bo2kshelf/bookcover-api:develop
    networks:
      - api
      - bookcover
      - imageproxy
    environment:
      PORT: 4000
      RAKUTEN_APPLICATION_ID: $RAKUTEN_APPLICATION_ID
      RAKUTEN_APPLICATION_SECRET: $RAKUTEN_APPLICATION_SECRET
      IMAGEPROXY_BASE_URL: http://imageproxy:8080
      BOOKCOVER_REDIS_CACHE_HOST: bookcover-redis
      BOOKCOVER_REDIS_CACHE_PORT: 6379
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  bookcover-redis:
    image: redis:6
    networks:
      - bookcover
    volumes:
      - bookcover-redis-data:/data

  neo4j-api:
    image: ghcr.io/bo2kshelf/neo4j-api:develop
    networks:
      - api
      - neo4j
    environment:
      PORT: 4000
      NEO4J_URL: bolt://neo4j-neo4j:7687
      NEO4J_USERNAME: $NEO4J_NEO4J_USER
      NEO4J_PASSWORD: $NEO4J_NEO4J_PASSWORD
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  neo4j-neo4j:
    image: neo4j:4.2
    networks:
      - neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_NEO4J_USER}/${NEO4J_NEO4J_PASSWORD}
      NEO4JLABS_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  users-api:
    image: ghcr.io/bo2kshelf/users-api:develop
    networks:
      - api
      - users
      - imageproxy
    environment:
      PORT: 4000
      PRISMA_DATABASE_URL: mysql://${USERS_MYSQL_USER}:${USERS_MYSQL_PASSWORD}@users-mysql:3306/${USERS_MYSQL_DATABASE}
      NEO4J_USERNAME: $NEO4J_NEO4J_USER
      NEO4J_PASSWORD: $NEO4J_NEO4J_PASSWORD
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  users-mysql:
    image: mysql:8.0
    networks:
      - users
    environment:
      MYSQL_ROOT_PASSWORD: $USERS_MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $USERS_MYSQL_DATABASE
      MYSQL_USER: $USERS_MYSQL_USER
      MYSQL_PASSWORD: $USERS_MYSQL_PASSWORD
    volumes:
      - users-mysql-data:/var/lib/mysql
    networks:
      - users
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 10s
      timeout: 20s
      retries: 10
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  search-api:
    image: ghcr.io/bo2kshelf/search-api:develop
    networks:
      - api
      - search
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        order: start-first

  search-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.9.3
    networks:
      - search
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - search-elasticsearch:/usr/share/elasticsearch/data
    networks:
      - search
    healthcheck:
      test: "curl --fail http://localhost:9200 || exit 1"
      interval: 2s
      timeout: 60s
      retries: 300

volumes:
  imageproxy-redis-data:
  users-mysql-data:
  bookcover-mysql-data:
  bookcover-redis-data:
  neo4j-neo4j-data:
  neo4j-neo4j-plugins:
  search-elasticsearch:

networks:
  api:
    driver: overlay
    attachable: true

  users:
    driver: overlay
    attachable: true

  neo4j:
    driver: overlay
    attachable: true

  bookcover:
    driver: overlay
    attachable: true

  search:
    driver: overlay
    attachable: true

  imageproxy:
    driver: overlay
    attachable: true
